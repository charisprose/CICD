trigger:
  branches:
  include:
  - main # Adjust according to your branch name

pool:
  vmImage: 'windows-latest' # Use Windows image for Docker compatibility

jobs:
- job: Run_tSQLt_Tests
  displayName: 'Run tSQLt Tests on SQL Server Docker Container'
  steps:
  - task: Docker@2
    displayName: 'Run SQL Server Docker Container'
    inputs:
    command: 'run'
    container: 'mcr.microsoft.com/mssql/server:2022-latest' # SQL Server Docker image
    arguments: '-e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=<PassWithFlyingColors>" -p 1433:1433 --name sql-server-container -v sql_data:/var/opt/mssql -d'
    options: '-d' # Run the container in the background

  - script: |
      echo "Waiting for SQL Server to initialize..."
      # Wait until SQL Server is ready to accept connections
      docker exec sql-server-container /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P <PassWithFlyingColors> -Q "SELECT 1"
    displayName: 'Wait for SQL Server to Initialize'
  - task: Docker@2
    displayName: 'Install tSQLt Framework'
    inputs:
    command: 'exec'
    container: 'sql-server-container'
    arguments: '/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P <PassWithFlyingColors> -i /tmp/tSQLt-installation-script.sql'

  - task: Docker@2
    displayName: 'Run tSQLt Tests'
    inputs:
    command: 'exec'
    container: 'sql-server-container'
    arguments: '/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P <PassWithFlyingColors> -Q "EXEC tSQLt.RunAll"'

  - task: Docker@2
    displayName: 'Get tSQLt Test Results'
    inputs:
    command: 'exec'
    container: 'sql-server-container'
    arguments: '/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P <PassWithFlyingColors> -Q "SELECT * FROM tSQLt.Results"'

  - task: PublishTestResults@2
    displayName: 'Publish tSQLt Test Results'
    inputs:
    testResultsFiles: '**/tSQLtTestResults.xml'
    testRunTitle: 'tSQLt Unit Tests'
    testResultsFormat: 'JUnit'
    mergeTestResults: true
