# File: azure-pipelines.yml on github
trigger:
- main
pool:
  vmImage: 'windows-latest'
variables:
  DB_name: $(DBName)

# Connect to Azure repo 
resources:
  repositories:
  - repository: Database Tests
    name: Database Tests
    type: git
    ref: main

jobs:
- job: Job_1
# Retrieve source code from current repo (for github git)
  steps:
  - checkout: self
    persistCredentials: true
  - task: PowerShell@2
    displayName: Run a git command and save output to a file on pipeline
    inputs:
      targetType: 'inline'
      script: |
       $git_merge_output = git log -m --name-only -n 1
       $git_merge_output | Out-File $env:BUILD_SOURCESDIRECTORY/git_merge_output.txt
  - task: PowerShell@2
    displayName: 'Read a file from azure repo'
    inputs:
      targetType: 'inline'
      script: |
        $output = Get-Content -Path $(Build.SourcesDirectory)\readme.md
        Write-Host $output
  - task: PowerShell@2
    displayName: 'Run a PS command'
    inputs:
      targetType: 'inline'
      script: |
         ./$(Build.SourcesDirectory)\test.ps1 -name "Hermione" 

  - task: PowerShell@2
    displayName: 'Run SQL queries'
    env:
      MAPPED_DBLogin: $(DBLogin)
      MAPPED_DBServer: $(DBServer)
      MAPPED_PW: $(password)
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "PS Task: Query from the Azure SQL"
        Write-Host "Database Name:" $(DB_Name)
        try{ Import-Module SqlServer} catch {Write-host "SqlServer module is already installed!"}
        $query_output = Invoke-sqlcmd -ConnectionString "Server=$env:MAPPED_DBServer;Initial Catalog=$env:DB_name;Persist Security Info=False;User ID=$env:MAPPED_DBLogin;Password= $env:MAPPED_PW;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30" -Query "select * from dbo.characters"
        $query_output | Out-File $env:BUILD_SOURCESDIRECTORY/query_output.txt
  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)'
      Contents: '*.txt'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
      flattenFolders: true
      
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: buildresult