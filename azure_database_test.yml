# File: azure-pipelines.yml
trigger:
- main
pool:
  vmImage: 'windows-latest'
variables:
  DB_name: $(DBName)
stages:
- stage: PublishToAzureSQL
  jobs:
  - job: PublishToAzureSQLDevelopment
    steps:
    - checkout: self
      persistCredentials: true
    - task: PowerShell@2
      displayName: 'read file from azure repo'
      inputs:
        script: |
         ./$(Build.SourcesDirectory)/read_file_from_local.ps1
    - task: PowerShell@2
      displayName: 'Run SQL queries'
      env:
        MAPPED_DBLogin: $(DBLogin)
        MAPPED_DBServer: $(DBServer)
        MAPPED_PW: $(password)
      inputs:
        targetType: 'inline'
        script: |
         git checkout main
         git pull
         Write-Host "PS Task: Query from the Azure SQL"
         Write-Host "Database Name:" $(DB_Name)
         $query_output = Invoke-sqlcmd -ConnectionString "Server=$env:MAPPED_DBServer;Initial Catalog=$env:DB_name;Persist Security Info=False;User ID=$env:MAPPED_DBLogin;Password= $env:MAPPED_PW;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30" -Query "select * from dbo.characters"
         $query_output | Out-File $env:BUILD_SOURCESDIRECTORY/query_output.txt
         $git_merge_output = git log -m --name-only -n 1
         $git_merge_output | Out-File $env:BUILD_SOURCESDIRECTORY/git_merge_output.txt

    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)'
        Contents: '*.txt'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
        flattenFolders: true
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: buildresult
    - task: PowerShell@2
      env:
        MAPPED_Github_PAT: $(Github.PAT)
        MAPPED_AzureDevops_PAT: $(AzureDevOps.PAT)
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          Write-Host ' - - - - - - - - - - - - - - - - - - - - - - - - -'
          Write-Host ' reflect Azure Devops repo changes to GitHub repo'
          Write-Host ' - - - - - - - - - - - - - - - - - - - - - - - - - '
          
          $stageDir = '$(Build.SourcesDirectory)' | Split-Path
          $githubDir = $stageDir +"\"+"gitHub"
          $destination = $githubDir +"\"+"charisprose/DatabaseTests.git"
          
          
          #please provide your username
          $alias = 'charisprose:'+ "$env:MAPPED_Github_PAT"
          #Please make sure, you remove https from azure-repo-clone-url
          $sourceURL = 'https://$env:MAPPED_AzureDevOps_PAT)@charisprose@dev.azure.com/charisprose/Database%20Tests/_git/Database%20Tests'
          #Please make sure, you remove https from github-repo-clone-url
          $destURL = 'https://' + $alias + '@github.com/charisprose/DatabaseTests.git'
          #Check if the parent directory exists and delete
          if((Test-Path -path $githubDir))
          {
            Remove-Item -Path $githubDir -Recurse -force
          }if(!(Test-Path -path $githubDir))
          {
            New-Item -ItemType directory -Path $githubDir
            Set-Location $githubDir
            git clone --mirror $sourceURL
          }
          else
          {
            Write-Host "The given folder path $githubDir already exists";
          }
          Set-Location $destinationWrite-Output '*****Git removing remote secondary****'
          git remote rm secondaryWrite-Output '*****Git remote add****'
          git remote add --mirror=fetch secondary $destURLWrite-Output '*****Git fetch origin****'
          git fetch $sourceURLWrite-Output '*****Git push secondary****'
          git push secondary --allWrite-Output '**Azure Devops repo synced with Github repo**'
          Set-Location $stageDirif((Test-Path -path $githubDir))
          {
            Remove-Item -Path $githubDir -Recurse -force
          }